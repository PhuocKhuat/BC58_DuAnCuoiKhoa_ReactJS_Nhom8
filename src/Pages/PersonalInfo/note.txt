.personalInfo .progress {
  display: flex;
  height: 1rem;
  overflow: hidden;
  line-height: 0;
  font-size: 0.75rem;
  background-color: #e9ecef;
  border-radius: 0.25rem;
  width: 100%;
}
.personalInfo .progress-bar {
  background-color: #008ffb;
  display: flex;
  flex-direction: column;
  justify-content: center;
  overflow: hidden;
  color: #fff;
  text-align: center;
  white-space: nowrap;
}
.personalInfo .progress-bar-striped {
  background-image: linear-gradient(
    45deg,
    rgba(255, 255, 255, 0.15) 25%,
    transparent 25%,
    transparent 50%,
    rgba(255, 255, 255, 0.15) 50%,
    rgba(255, 255, 255, 0.15) 75%,
    transparent 75%,
    transparent
  );
  background-size: 1rem 1rem;
}

/* :where(.css-dev-only-do-not-override-1qhpsh8).ant-tabs .ant-tabs-tab-btn:active{
  background: linear-gradient(to right, #227df9, #7462f9, #df3ef8) !important;
  color: white !important;
} */

import React, { useState } from "react";
import { Button, Modal } from "antd";
import { FastField, Form, Formik } from "formik";
import InputFlied from "../../CustomFlied/InputFlied";
import { https } from "../../Services/api";
import { useDispatch } from "react-redux";
import { setUpdateForm } from "../../Redux/personalSlice";

const Modals = () => {
  const initialValues = {
    hoTen: "",
    matKhau: "",
    email: "",
    soDT: "",
    taiKhoan: "nguyenTest",
    maNhom: "GP09",
    maLoaiNguoiDung: "HV",
  };
  const [isModalOpen, setIsModalOpen] = useState(false);
  const dispatch = useDispatch();
  const showModal = () => {
    setIsModalOpen(true);
  };
  const handleCancel = () => {
    setIsModalOpen(false);
  };
  const handleOk = () => {
    setIsModalOpen(false);
  };
  const handleUpdate = (infoUsers) => {
    console.log("ðŸš€ ~ handleUpdate ~ infoUsers:", infoUsers)
    https
      .put("/api/QuanLyNguoiDung/CapNhatThongTinNguoiDung", infoUsers)
      .then((res) => {
        console.log(res);
        dispatch(setUpdateForm(res.data));
      })
      .catch((err) => {
        console.log(err);
      });
    };
    const handleChange = ()=>{
    
    }
  return (
    <div className="modals">
      <Button type="primary" className="btnModals" onClick={showModal}>
        <p>Personal Infomation</p>
      </Button>
      <Modal
        title="Edit personal information"
        open={isModalOpen}
        onOk={handleOk}
        onCancel={handleCancel}
      >
        <Formik initialValues={initialValues}>
          {(formikProps) => {
            const { values, errors, touched } = formikProps;
            console.log("ðŸš€ ~ Modals ~ touched:", touched);
            console.log("ðŸš€ ~ Modals ~ errors:", errors);
            console.log("ðŸš€ ~ Modals ~ values:", values);
            return (
              <Form className="modalForm">
                <FastField
                  name="hoTen"
                  type="text"
                  component={InputFlied}
                  label="Full Name:"
                  placeholder="Edit your full name"
                  onChange={handleChange}
                />
                <FastField
                  name="matKhau"
                  type="password"
                  component={InputFlied}
                  label="Password:"
                  placeholder="Edit your password"
                />
                <FastField
                  name="email"
                  type="email"
                  component={InputFlied}
                  label="Email:"
                  placeholder="Edit your email"
                />
                <FastField
                  name="soDT"
                  type="number"
                  component={InputFlied}
                  label="Phone Number:"
                  placeholder="Edit your phone number"
                />
                <Button onClick={()=>{
                  handleUpdate(initialValues)
                }} className="btnUpdate">
                  Update
                </Button>
              </Form>
            );
          }}
        </Formik>
      </Modal>
    </div>
  );
};
export default Modals;

const onChangeFilterCourseByIdMa = (checkedValues)=>{
    dispatch(fetchCoursesList(checkedValues.toString()));
    console.log("checked = ", typeof checkedValues);
}

<h6 className="mb-3 text-base font-medium text-gray-900 dark:text-white">
                  Courses Catalog
                </h6>
                <Checkbox.Group
                  style={{
                    width: "100%",
                  }}
                  onChange={onChangeFilterCourseByIdMa}
                >
                  <ul
                    className="space-y-2 text-sm mb-4"
                    aria-labelledby="dropdownDefault"
                  >
                    {renderCourseCatalog()}
                  </ul>
                </Checkbox.Group>
                
 const renderCourseCatalog = () => {
    return catalog.map((courseCatalog, index) => (
      <li className="flex items-center" key={index}>
        <Checkbox value={courseCatalog.maDanhMuc}>
          {courseCatalog.maDanhMuc}
        </Checkbox>
      </li>
    ));
  };

else if(maDanhMuc.trim() !== ""){
      let res = await https.get(
        `/api/QuanLyKhoaHoc/LayKhoaHocTheoDanhMuc?maDanhMuc=${maDanhMuc}&MaNhom=GP09`
      );
      return res.data;
    }

    ADD USER ADMIN
    setAddUser: (state, action)=>{
      let cloneAddUser = [...state.userList];
      let indexUserByAccount = cloneAddUser.findIndex(user => user.taiKhoan === action.payload.taiKhoan);
      if(indexUserByAccount === -1){
        cloneAddUser.push(action.payload);
        message.success("Added user successfully");
      }
      else{
        message.error("Account is already in use");
      }
      state.userList = cloneAddUser;
    },

    DELETE USER ADMIN
    setDeleteUser : (state, action)=>{
      let cloneUserList = [...state.userList];
      let indexUser = cloneUserList.filter(user => user.taiKhoan !== action.payload);
      state.userList = indexUser;
      message.success("The user has been successfully deleted");
      // userLocal(state.userList.map(user => user));
    },

    // localStorage.getItem("DELETE_USER") === -1 ?
// : JSON.parse(localStorage.getItem("DELETE_USER"))

// const userLocal = (user)=>{
//   localStorage.setItem("DELETE_USER", JSON.stringify(user));
// }

// import IndividualInfo from "../../ObjectClass/individualInfo";

// export const saveInforUser = () => {
//   const storeInfoUser = localStorage.getItem("UPDATE_USER");
//   if (storeInfoUser !== null) {
//     let info = JSON.parse(storeInfoUser);
//     return new IndividualInfo(info.hoTen, info.matKhau, info.email, info.soDT, info.taiKhoan, info.maNhom, info.maLoaiNguoiDung);
//   }
// };